def longest_suffix(arr):
    i = len(arr) - 1
    while i > 0 and arr[i - 1] >= arr[i]:
        i -= 1
    return arr[i:]

def find_pivot(arr):
    i = len(arr) - 2
    while i >= 0 and arr[i] >= arr[i + 1]:
        i -= 1
    return i

def find_successor(arr, pivot):
    successor = len(arr) - 1
    while arr[pivot] >= arr[successor]:
        successor -= 1
    return successor

def next_permutation(arr):
    if len(arr) <= 1:
        return arr
    
    # Step 1: Find the longest non-increasing suffix
    suffix = longest_suffix(arr)
    
    # Step 2: Find the pivot
    pivot_index = find_pivot(arr)
    
    # If no pivot is found, the entire list is in descending order, return reversed list
    if pivot_index == -1:
        return arr[::-1]
    
    # Step 3: Find the successor to the pivot
    successor_index = find_successor(arr, pivot_index)
    
    # Step 4: Swap the pivot with the successor
    arr[pivot_index], arr[successor_index] = arr[successor_index], arr[pivot_index]
    
    # Step 5: Reverse the suffix
    arr[pivot_index + 1:] = reversed(arr[pivot_index + 1:])
    
    return arr

arr=[3,2,1]
print(next_permutation(arr))